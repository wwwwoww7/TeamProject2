<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- #################### 보안 필터 체인을 적용하지 않는 요청 경로  #################### -->
 	<!-- 보안 필터 체인 설정보다 먼저 설정해야함 -->
	<security:http pattern="/resource/**" security="none"/>

	<!-- #################### 보안 필터 체인 설정 #################### -->
	<security:http>
		<!-- ### 로그인/로그아웃: 방법1 ### -->
		<!-- 
		<security:form-login login-page="/ch17/loginForm"
							 login-processing-url="/login"	 
							 username-parameter="mid"
							 password-parameter="mpassword"
							 default-target-url="/ch17/content"
							 authentication-failure-url="/ch17/loginForm"/>
							 
		<security:logout logout-url="/logout" 
						 logout-success-url="/ch17/content"/> 
		-->		
		
		<!-- ### 로그인/로그아웃: 방법2 ### -->			 
		<!--  이 앞에 contextroot까지 생략되어 있는 것 -->
		<security:form-login login-page="/login/login"
					 login-processing-url="/login"	
					 username-parameter="user_id"
					 password-parameter="user_pw"
					 authentication-success-handler-ref="authenticationSuccessHandler"
					 authentication-failure-handler-ref="authenticationFailureHandler"/>			 
						 
		<security:logout logout-url="/logout" 
						 success-handler-ref="logoutSuccessHandler"/>
						 
		<!-- ### 사이트간 요청 위조 비활성화 (기본: 활성화)###  -->
		<security:csrf disabled="true"/>		
		
		<!-- ### url 권한 설정 ### -->
		<!-- /path/path/**, /path/method* -->
		
		
		<security:intercept-url pattern="/ch17/admin*" access="hasRole('ROLE_ADMIN')"/> <!-- admin*: 경로, admin:이름 -->
		<!-- 곽혜빈이 지운 부분
		<security:intercept-url pattern="/ch17/manager*" access="hasRole('ROLE_MANAGER')"/>
		<security:intercept-url pattern="/ch17/user*" access="isAuthenticated()"/>	
		
		<security:intercept-url pattern="/**" access="permitAll"/>
		
	
		<security:access-denied-handler error-page="/login/error403"/>
		
		 -->
		<!-- ### 권한 없음(403) 에러일 경우 포워드 페이지 ### -->
		
		
		<!-- ### 동일한 아이디로 중복 로그인 못하도록 방지 ### -->
		<!-- 
		web.xml 수정
		<listener>
  			<listener-class>
  				org.springframework.security.web.session.HttpSessionEventPublisher
  			</listener-class>
		</listener>
		-->
		<!-- 
		WARN : org.springframework.beans.GenericTypeAwarePropertyDescriptor.
		                          getWriteMethodForActualAccess() 발생하지만 무시
		 -->
		<security:session-management>
			<!-- 
			기존 브라우저는 강제 로그아웃, 다른 브라우저는 로그인
			max-sessions: 최대 세션수
			error-if-maximum-exceeded: 세션이 초과되었을 때 기존 브라우저 에러 발생 여부
			expired-url: 사용자의 액션이 있을 때 강제 로그아웃된 브라우저가 이동할 경로 
			-->
			<security:concurrency-control max-sessions="1" 
										  error-if-maximum-exceeded="false" 
										  expired-url="/login/login"/>
			 
			<!-- 
			기존 브라우저는 로그인 유지, 다른 브라우저는 로그인되지 않고 에러 메시지 출력
			<security:concurrency-control max-sessions="1" 
										  error-if-maximum-exceeded="true"/> 
			 -->
		</security:session-management>		
	</security:http>	
	
	<!-- #################### 인증 관리자 설정 #################### -->
	<!-- 인증 관리자 설정 -->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider"/>
	</security:authentication-manager>
	
	<!-- 인증 제공자 설정 -->
	<bean id="daoAuthenticationProvider" 
		  class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="jdbcUserService"/>
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
	</bean>
	
	<!-- 사용자 정보 설정 -->
	<security:jdbc-user-service id="jdbcUserService"
		data-source-ref="dataSource"
		users-by-username-query="select mid, mpassword, menabled from member where mid=?"
		authorities-by-username-query="select mid, mrole from member where mid=?"/>
		
	<!-- 권한 계층 설정 -->
	<bean id="roleHierarchyAuthoritiesMapper" 
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg>
			<bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
				<property name="hierarchy">
					<value>
						ROLE_ADMIN > ROLE_MANAGER
						ROLE_MANAGER > ROLE_USER
					</value>
				</property>
			</bean>
		</constructor-arg>
	</bean>
	
	<!-- #################### 인증 성공/실패 처리 핸들러 #################### -->
	<bean id="authenticationSuccessHandler" 
		  class="com.mycompany.webapp.security.AuthenticationSuccessHandler">
		<!-- 
		alwaysUseDefaultTargetUrl:false(기본), 요청 경로로 리다이렉트
		alwaysUseDefaultTargetUrl:true, defaultTargetUrl로 강제 리다이렉트
		 -->
		<property name="alwaysUseDefaultTargetUrl" value="false"/>
		<property name="defaultTargetUrl" value="/login/join"/>
	</bean>
	
	<bean id="authenticationFailureHandler" 
		  class="com.mycompany.webapp.security.AuthenticationFailureHandler">
		<!-- 
		useForward:false(기본), defaultFailureUrl로 리다이렉트
		useForward:true, defaultFailureUrl로 포워드
		-->
		
		<!--
		포워드	
		<property name="useForward" value="true"/> value = false일때가 default
		<property name="defaultFailureUrl" value="/WEB-INF/views/ch17/loginForm.jsp"/>
		-->
		 
		 <!-- 리다이렉트 (이게 default)-->
		<property name="useForward" value="false"/> 
		<!-- value = false일때랑 true 일때랑 경로가 다름!-->
		<property name="defaultFailureUrl" value="/login/login"/>
	</bean>
	

	<bean id="logoutSuccessHandler" 
		  class="com.mycompany.webapp.security.LogoutSuccessHandler">
		<!-- 
		defaultTargetUrl:생략, 컨텍스트 루트 경로(/index.jsp)로 리다이렉트 (홈페이지로)
		defaultTargetUrl:지정, defaultTargetUrl로 강제 리다이렉트
		 -->
	<!-- 	<property name="defaultTargetUrl" value="/ch17/content"/> -->
	</bean>	
</beans> 

